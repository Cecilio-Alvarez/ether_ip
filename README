This file is ether_ip/README.  It discusses the directory structure,
built in example and application configuration necessary to use ether_ip.

I.  ether_ip directory structure:
ether_ip/
    README -- this file
    
    ether_ipApp/
	src -- contains the source code and dbd definitions.
		       Used to build and install the library
		      ether_ipLib -- containing driver object file
		       and to install  
		      ether_ip.dbd -- the database definition file
				   needed by databases using the driver.
	doc -- contains the driver specific documentation

     testether_ipApp/
	src -- contains an example application that builds a
		epics module that uses the ether_ip driver.
	Db -- contains sample databases using the ether_ip driver.
	dm2k -- contains sample dm2k adl display files.

     config -- configuration setup with RELEASE referring to location
	       of ETHER_IP for use by the example in testether_ipApp

     Makefile -- setup to build 1st ether_ipApp, 
				then config, 
				then testether_ipApp, so that the
				examples will work.

	
 
II.

How to build and setup the tests that are checked out with the driver.
This document uses cvs tag ether_ip-0-3 and release number 0-3 as an
example.
The documentation should work for later releases by substituting the
new release number for 0-3. 


    1.	Set up your environment so that you can use cvs and the
      shorthand environtmental variables that are provided.

    (If you are on Linux 1st 
	     exec csh)
	
	source /cs/epics/ADE/ADEsetup-R3.13.3.<userid>
	
	(then if you are on Linux
	      exec bash
	 if you still want to use bash)
    2.  cd $SUP/ether_ip
    3.  cvs checkout -r ether_ip-0-3 -d 0-3 ether_ip
    4.  cd 0-3
    5.  gmake (or whatever the gnu make utility is called at your
	      site)
    6.  Changing the type of ioc: 
     This code was tested with  both an pc486 and mv2700 iocs.
     We think it should work for other types of iocs, but we don't
	      have others, so we haven't tried that yet.

	The test files in iocBoot/iocether_ip are expecting to be
	      tested on an mv2700 (though EPICS uses the configuration
	      for an mv2300)
	If you want to use these tests for a pc486 (or some other type
	      of ioc.  You will need to
	6.1.  cd   iocBoot/iocether_ip and
	6.2.   edit the Makefile.
		   Change ARCH = mv2300 to
		    ARCH = pc486
        6.3.  create a new version of the cdCommands file by typing:
	      gmake clean
	      gmake

	6.4.  If you want to watch the test load  on your ioc,
	      set the startup "startup script" boot parameter on your ioc to
      /cs/epics/ADE/R3.13.3/support/ether_ip/0-3/iocBoot/iocether_ip/st.boot 

	      (st.boot is a small file with just two lines:
       cd  "/cs/epics/ADE/R3.13.3/support/ether_ip/0-3/iocBoot/iocether_ip"
       #< st.cmd
	      We use this configuration of our iocs so that we can
	      watch the booting of an ioc from a telnet session when
	      we do not have a serial interface available.
     7.  Boot your ioc and run some of the displays in
	      testether_ipApp/dm2k if you have dm2k available.

III.To use the ether_ip driver in your ioc application
      1. Make sure that the driver code has been checked out and built
      as described above.  The Make in the  config directory
      depends on the proper directories already existing.

      2. Set up ETHER_IP definitions  in the configuration directory
      for your application by: 
      2.1.   cd  <your ioc application>/config
      2.2.   edit the file RELEASE
		  add the line 
        ETHER_IP=/cs/epics/ADE/R3.13.3/support/ether_ip/0-3
      2.3.  Make sure the new definitions take effect by
	    gmake clean
	    gmake
	       in the config directory.

      3. Set up the  dbd include file in your src directory to include ether_ip.dbd by
         adding the line
		include "ether_ip.dbd"
         after the line include "../base.dbd".
         There is an example in testether_ipApp/src/ether_ipInclude.dbd.

	 Now that RELEASE file has been edited and config has been
	 rebuilt the Makefile.Host will be able to find ether_ip.dbd
	 when it expands your dbd file.

      4.  Set up your application to include the object libraries by
          including the line
		    LIBOBJS += $(ETHER_IP_BIN)/ether_ipLib
          in your Makefile.Vx file.

	  ETHER_IP_BIN will be automatically defined for every type of
	  ioc for which your application is built.


