-*- outline -*- (use emacs to see this in outline-mode)

* Intro
The sources for this driver are CVS-controlled:
CVS root: sofa.ic.ornl.gov:/cs/epics/cvsroot  
Module:   support/linac/ether_ip (aliased as ether_ip)
Tag:      ether_ip-<RELEASE>

The current release is 0-4.
The non-commited next release will be 0-5.
Replace <RELEASE> by the current release.

What you have to do is
- compile the ether_ip driver/device sources
- somehow load them into vxWorks on the IOC
- include the DBD description of the new device support
  so that EPICS knows about them
- create EPICS records that use the new driver

The directory structure and Makefiles were created by 
makeBaseApp.pl from EPICS R3.13.3 base.

* I. ether_ip directory structure:
ether_ip/
    README -- this file
    ether_ipApp/   - the DRIVER/DEVICE. You need this!
        src -- contains the source code and dbd definitions.
               Used to build and install the library
                  ether_ipLib -- containing driver object file
               and to install  
                  ether_ip.dbd -- the database definition file
                                  needed by databases using the driver.
        doc -- contains the driver specific documentation
    testether_ipApp/  - example of EPICS database for ether_ip.
                        You can use this for reference and tests.
        src  -- contains an example application that builds a
                epics module that uses the ether_ip driver.
        Db   -- contains sample databases using the ether_ip driver.
        dm2k -- contains sample dm2k adl display files.

    config -- configuration setup with RELEASE referring to location
              of ETHER_IP for use by the example in testether_ipApp

    Makefile -- setup to build 1st ether_ipApp, 
                then config, 
                then testether_ipApp, so that the
                examples will work.

* II. Build and Test Setup
    1. When using the SNS ADE, you might want to source the ADE
       setup script to get shortcut variables for the various
       locations. If you use a different system, you might just
       remember where you put your stuff.
 
       In the following example, SUP is set to
       /cs/epics/ADE/R3.13.3/support
    2. cd $SUP/ether_ip
    3. cvs export -r ether_ip-<RELEASE> -d <RELEASE> ether_ip
    4. cd <RELEASE>
    5. gmake (or gnumake, make, ...)
    6. Changing the type of ioc: 
       This code was tested with  both an pc486 and mv2700 iocs.
       We think it should work for other types of iocs, but we don't
       have others, so we haven't tried that yet.

       The test files in iocBoot/iocether_ip are expecting to be
       tested on an mv2700 (though EPICS uses the configuration
       for an mv2300)
       If you want to use these tests for a pc486 (or some other type
       of ioc.  You will need to
       6.1.  cd   iocBoot/iocether_ip and
       6.2.  edit the Makefile.
                   Change ARCH = mv2300 to
                   ARCH = pc486
       6.3.  create a new version of the cdCommands file by typing:
             gmake clean
             gmake
       6.4.  If you want to watch the test load  on your ioc,
             set the startup "startup script" boot parameter on your ioc to
             /cs/epics/ADE/R3.13.3/support/ether_ip/<RELEASE> \
	        /iocBoot/iocether_ip/st.boot 

             (st.boot is a small file with just two lines:
	      cd  "/cs/epics/ADE/R3.13.3/support/ether_ip/<RELEASE> \
		   /iocBoot/iocether_ip"
              #< st.cmd
             We use this configuration of our iocs so that we can
             watch the booting of an ioc from a telnet session when
             we do not have a serial interface available.
     7. Boot your ioc and run some of the displays in
        testether_ipApp/dm2k if you have dm2k available.

* III. Use of the ether_ip driver in your ioc application
      1. Make sure that the driver code has been checked out and built
         as described above.  The Make in the config directory
	 depends on the proper directories already existing.

      2. Set up ETHER_IP definitions  in the configuration directory
         for your application by: 
      2.1. cd  <your ioc application>/config
      2.2. edit the file RELEASE file, add the line 
           ETHER_IP=/cs/epics/ADE/R3.13.3/support/ether_ip/<RELEASE>
      2.3. Make sure the new definitions take effect by
           gmake clean
           gmake
           in the config directory.
      3. Set up the  dbd include file in your src directory to include
         ether_ip.dbd by adding the line
                include "ether_ip.dbd"
         after the line include "../base.dbd".
         There is an example in testether_ipApp/src/ether_ipInclude.dbd.

         Now that RELEASE file has been edited and config has been
         rebuilt the Makefile.Host will be able to find ether_ip.dbd
         when it expands your dbd file.
      4. Set up your application to include the object libraries by
         including the line
                   LIBOBJS += $(ETHER_IP_BIN)/ether_ipLib
         in your Makefile.Vx file.

         ETHER_IP_BIN will be automatically defined for every type of
         ioc for which your application is built.

R. Wright, K. Kasemir